#define SkimmingSR_cxx
#include "SkimmingSR.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <iostream>
#include <vector>
#include <cstring>
#include <string>
#include <fstream>

using namespace std;

int main(int argc, char* argv[])
{

  if (argc < 2) {
    cerr << "Please give 3 arguments " << "runList " << " " << "outputFileName" << " " << "dataset" << endl;
    return -1;
  }
  const char *inputFileList = argv[1];
  const char *outFileName   = argv[2];
  const char *data          = argv[3];

  SkimmingSR ana(inputFileList, outFileName, data);
  cout << "dataset " << data << " " << endl;

  ana.EventLoop(data,inputFileList);

  return 0;
}

void SkimmingSR::EventLoop(const char *data,const char *inputFileList) {
  if (fChain == 0) return;

  Long64_t nentries = fChain->GetEntriesFast();
  cout << "nentries " << nentries << endl;
  cout << "Analyzing dataset " << data << " " << endl;

  Long64_t nbytes = 0, nb = 0;
  int decade = 0;
  //---------- deactivate unwanted branches ---------------
  // fChain->SetBranchStatus("*AK8*",0);
  fChain->SetBranchStatus("*clean*",0);
  fChain->SetBranchStatus("*Clean*",0);
  fChain->SetBranchStatus("*DeltaPhi*",0);

  TTree *newtree = fChain->CloneTree(0);
  TString s_data = data;
  float xsec1;
  cout<<"Key words for if dataset is special: TTJets_DiLept, TTJets_SingleLeptFromT, V12"<<endl;
  Long64_t nSurvived = 0;
  double wt = 1.0;
  if(s_data=="TTGJets") xsec1=3.697;
  if(s_data=="TTJets_DiLept") xsec1=88.34;    
  if(s_data=="ZGTo2NuG") {
    xsec1=32.3;}

  // for (Long64_t jentry=0; jentry<10000;jentry++) {
   for (Long64_t jentry=0; jentry<nentries;jentry++) {

    // ==============print number of events done == == == == == == == =
    double progress = 10.0 * jentry / (1.0 * nentries);
    int k = int (progress);
    if (k > decade)
      cout << 10 * k << " %" <<endl;
    decade = k;
    // ===============read this entry == == == == == == == == == == == 
    Long64_t ientry = LoadTree(jentry);
    if (ientry < 0) break;
    nb = fChain->GetEntry(jentry);   nbytes += nb;
    //CrossSection = xsec1;
    NumEvents = nentries;
    //Summer16v3
    // if (s_data.Contains("WGJets_MonoPhoton_PtG-40to130")) { NumEvents=5077680; xsec1=12.7; CrossSection = xsec1;     Weight = CrossSection/NumEvents;    }
    // if (s_data.Contains("WGJets_MonoPhoton_PtG-130")){ NumEvents=502190; xsec1=0.834; CrossSection = xsec1;     Weight = CrossSection/NumEvents;    }//4903082    
    if (s_data.Contains("ZGJets_MonoPhoton_PtG-40to130")) { NumEvents=4941202; xsec1=2.816; CrossSection = xsec1;     Weight = CrossSection/NumEvents;    }
    if (s_data.Contains("ZGJets_MonoPhoton_PtG-130")){ NumEvents=2000139; xsec1=0.223; CrossSection = xsec1;     Weight = CrossSection/NumEvents;    }//4903082    
    // if (s_data.Contains("TTGJets")) {NumEvents = 4870911; xsec1=3.697 ; CrossSection = xsec1;}//Summer16_v3
    // if (s_data.Contains("TTJets_DiLept")){ NumEvents = 40589506; xsec1=88.34;  CrossSection = xsec1;}
    // if (s_data.Contains("TTJets_SingleLeptFromT")) {NumEvents = 61621218;}
    // if (s_data.Contains("TTJets_SingleLeptFromTbar")) {NumEvents = 60343752;}
    // if (s_data.Contains("TTJets_HT-1200to2500")){NumEvents = 2932983; xsec1=0.194;  CrossSection = xsec1;}
    // if (s_data.Contains("TTJets_HT-2500toInf")){ NumEvents = 1519815; xsec1=0.0024;  CrossSection = xsec1;}
    // if (s_data.Contains("TTJets_HT-600to800 ")){ NumEvents = 14344298; xsec1=2.685;  CrossSection = xsec1;}		   
    // if (s_data.Contains("TTJets_HT-800to1200")){ NumEvents = 10529747; xsec1=1.096;  CrossSection = xsec1;}
    // if (s_data.Contains("WJetsToLNu_HT-100To200  ")){ NumEvents = 9945478; xsec1=1627.45;  CrossSection = xsec1;}
    // if (s_data.Contains("WJetsToLNu_HT-1200To2500")){ NumEvents = 6872441; xsec1=1.608;  CrossSection = xsec1;}
    // if (s_data.Contains("WJetsToLNu_HT-200To400  ")){ NumEvents = 38984322; xsec1=435.24;  CrossSection = xsec1;}
    // if (s_data.Contains("WJetsToLNu_HT-2500ToInf ")){ NumEvents = 2637821; xsec1=0.039;  CrossSection = xsec1;}
    // if (s_data.Contains("WJetsToLNu_HT-400To600  ")){ NumEvents = 7759701; xsec1=59.18;  CrossSection = xsec1;}
    // if (s_data.Contains("WJetsToLNu_HT-600To800  ")){ NumEvents = 18687480; xsec1=14.58;  CrossSection = xsec1;}
    // if (s_data.Contains("WJetsToLNu_HT-800To1200 ")){ NumEvents = 7830536; xsec1=6.66;  CrossSection = xsec1;}

    //Fall17
    if (s_data.Contains("Fall17_WGJets_MonoPhoton_PtG-130")) { NumEvents=4917580; xsec1=0.834; CrossSection = xsec1;    Weight = CrossSection/NumEvents;     }
    if (s_data.Contains("Fall17_WGJets_MonoPhoton_PtG-40to130")){ NumEvents=4903082; xsec1=12.7; CrossSection = xsec1;     Weight = CrossSection/NumEvents;    }        
    // if (s_data.Contains("Fall17_TTGJets")) {NumEvents = 4623345; xsec1=3.697 ; CrossSection = xsec1;}
    // if (s_data.Contains("Fall17_TTJets_DiLept")){ NumEvents = 28380110; xsec1=88.34;  CrossSection = xsec1;}
    // if (s_data.Contains("Fall17_TTJets_SingleLeptFromT")) {NumEvents = 61761347; xsec1=182.72;  CrossSection = xsec1;}
    // if (s_data.Contains("Fall17_TTJets_SingleLeptFromTbar")) {NumEvents = 56705550; xsec1=182.72;  CrossSection = xsec1;}
    // if (s_data.Contains("Fall17_TTJets_HT-1200to2500")){NumEvents = 13214871; xsec1=0.198;  CrossSection = xsec1;}
    // if (s_data.Contains("Fall17_TTJets_HT-2500toInf")){ NumEvents = 5155687; xsec1=0.0024;  CrossSection = xsec1;}
    // if (s_data.Contains("Fall17_TTJets_HT-600to800 ")){ NumEvents = 81507662; xsec1=2.734;  CrossSection = xsec1;}		 
    // if (s_data.Contains("Fall17_TTJets_HT-800to1200")){ NumEvents = 40187347; xsec1=1.121;  CrossSection = xsec1;}
    // if (s_data.Contains("Fall17_WJetsToLNu_HT-100To200  ")){ NumEvents = 35862893; xsec1=1627.45;  CrossSection = xsec1;}
    // if (s_data.Contains("Fall17_WJetsToLNu_HT-1200To2500")){ NumEvents = 20258624; xsec1=1.608;  CrossSection = xsec1;}
    // if (s_data.Contains("Fall17_WJetsToLNu_HT-200To400  ")){ NumEvents = 21250517; xsec1=435.24;  CrossSection = xsec1;}
    // if (s_data.Contains("Fall17_WJetsToLNu_HT-2500ToInf ")){ NumEvents = 21495421; xsec1=0.039;  CrossSection = xsec1;}
    // if (s_data.Contains("Fall17_WJetsToLNu_HT-400To600  ")){ NumEvents = 14313274; xsec1=59.18;  CrossSection = xsec1;}
    // if (s_data.Contains("Fall17_WJetsToLNu_HT-600To800  ")){ NumEvents = 21709087; xsec1=14.58;  CrossSection = xsec1;}
    // if (s_data.Contains("Fall17_WJetsToLNu_HT-800To1200 ")){ NumEvents = 20432728; xsec1=6.66;  CrossSection = xsec1;}


    //Autumn18
    if (s_data.Contains("Autumn18_WGJets_MonoPhoton_PtG-130")) {NumEvents=5087214; xsec1=0.834; CrossSection = xsec1;     Weight = CrossSection/NumEvents;    }
    if (s_data.Contains("Autumn18_WGJets_MonoPhoton_PtG-40to130")){ NumEvents= 4560231; xsec1=12.7; CrossSection = xsec1;     Weight = CrossSection/NumEvents;     } 
    // if (s_data.Contains("Autumn18_TTGJets")) {NumEvents = 4569160; xsec1=3.697 ; CrossSection = xsec1;}                
    // if (s_data.Contains("Autumn18_TTJets_DiLept")){ NumEvents = 28701360; xsec1=88.34;  CrossSection = xsec1;}
    // if (s_data.Contains("Autumn18_TTJets_SingleLeptFromT")) { NumEvents = 57259880; xsec1=182.72;  CrossSection = xsec1;}
    // if (s_data.Contains("Autumn18_TTJets_SingleLeptFromTbar")) { NumEvents = 59929205; xsec1=182.72;  CrossSection = xsec1;}
    // if (s_data.Contains("Autumn18_TTJets_HT-1200to2500")){NumEvents = 2779427; xsec1=0.198;  CrossSection = xsec1;}
    // if (s_data.Contains("Autumn18_TTJets_HT-2500toInf")){ NumEvents = 1451104; xsec1=0.0024;  CrossSection = xsec1;}
    // if (s_data.Contains("Autumn18_TTJets_HT-600to800 ")){ NumEvents = 14149394; xsec1=2.734;  CrossSection = xsec1;}		 
    // if (s_data.Contains("Autumn18_TTJets_HT-800to1200")){ NumEvents = 10372802; xsec1=1.121;  CrossSection = xsec1;}
    // if (s_data.Contains("Autumn18_WJetsToLNu_HT-100To200  ")){ NumEvents = 29521158; xsec1=1627.45;  CrossSection = xsec1;}
    // if (s_data.Contains("Autumn18_WJetsToLNu_HT-1200To2500")){ NumEvents = 7633949; xsec1=1.608;  CrossSection = xsec1;}
    // if (s_data.Contains("Autumn18_WJetsToLNu_HT-200To400  ")){ NumEvents = 25468933; xsec1=435.24;  CrossSection = xsec1;}
    // if (s_data.Contains("Autumn18_WJetsToLNu_HT-2500ToInf ")){ NumEvents = 3273980; xsec1=0.039;  CrossSection = xsec1;}
    // if (s_data.Contains("Autumn18_WJetsToLNu_HT-400To600  ")){ NumEvents = 5932701; xsec1=59.18;  CrossSection = xsec1;}
    // if (s_data.Contains("Autumn18_WJetsToLNu_HT-600To800  ")){ NumEvents = 19771294; xsec1=14.58;  CrossSection = xsec1;}
    // if (s_data.Contains("Autumn18_WJetsToLNu_HT-800To1200 ")){ NumEvents = 8402687; xsec1=6.66;  CrossSection = xsec1;}

    //    Weight = CrossSection/NumEvents;    
    wt = Weight*1000.0;

    h_selectBaselineYields_->Fill("No cuts, evt in 1/fb",wt);

    //------ putting a cut on madHT for SingleLept and DiLept samples of TTbar. Do not use for other samples.
    if((s_data.Contains("TTJets_DiLept") 
	|| s_data.Contains("TTJets_SingleLeptFromT") )
       && madHT>600) continue;
    h_selectBaselineYields_->Fill("madHT cut",wt);
   

   if(s_data.Contains("V12")){//veto procedure if using V12 ntuples
     if(Muons->size()==0) h_selectBaselineYields_->Fill("0 #mu",wt);
     else continue;
     if(Electrons->size() == 0) h_selectBaselineYields_->Fill("0 electrons",wt);
     else continue;
   }
   else{       //veto procedure if using V16 or above ntuples
     if(NMuons==0) h_selectBaselineYields_->Fill("0 #mu",wt);
     else continue;
     if(NElectrons==0) h_selectBaselineYields_->Fill("0 electrons",wt);
     else continue;
   }    
//
   // //apply iso track veto                                                                                                                
          if(isoElectronTracks==0 && isoMuonTracks ==0 && isoPionTracks==0)
      {
        h_selectBaselineYields_->Fill("Iso track",wt);
      }
    else continue;

    //about photons
    TLorentzVector bestPhoton=getBestPhoton();
    if(bestPhoton.Pt()>100)     h_selectBaselineYields_->Fill("Good #gamma with Pt > 100",wt);
    else continue;
    if( MET > 100 )        h_selectBaselineYields_->Fill("MET > 100",wt);
    else continue;
    //---------------------------------------------------------------------------------
    int minDRindx=-100,phoMatchingJetIndx=-100,nHadJets=0;
    double minDR=99999,ST=0;
    vector<TLorentzVector> hadJets;

    for(int i=0;i<Jets->size();i++){
      if( ((*Jets)[i].Pt() > 30.0) && (abs((*Jets)[i].Eta()) <= 2.4) ){
	double dR=bestPhoton.DeltaR((*Jets)[i]);
	if(dR<minDR){minDR=dR;minDRindx=i;}
      }
    }
    
    for(int i=0;i<Jets->size();i++){
      if( ((*Jets)[i].Pt() > 30.0) && (abs((*Jets)[i].Eta()) <= 2.4) ){
	if( !(minDR < 0.3 && i==minDRindx) )
	  hadJets.push_back((*Jets)[i]);
      }
    }
    if( minDR<0.3 ) phoMatchingJetIndx=minDRindx;
    for(int i=0;i<hadJets.size();i++){
      if( (abs(hadJets[i].Eta()) < 2.4) ){ST=ST+(hadJets[i].Pt());}
      if( (abs(hadJets[i].Eta()) < 2.4) ){nHadJets++;}
    }
    if( minDR<0.3 ) ST=ST+bestPhoton.Pt();//add the pt of photon if and only if there is a matching jet.
    //-----------------------------------------------------------------------
    if( (nHadJets >= 2) )  h_selectBaselineYields_->Fill("nJets >=2",wt);
    else continue;

    //end of select skimming parameters
    nSurvived++;
    newtree->Fill();
 
  } // loop over entries
  //  newtree->AutoSave();
  cout<<"No. of entries survived: "<<nSurvived<<endl;
  cout<<"Cross-section : "<<CrossSection<<endl;
  cout<<"Weight ib pb-1 : "<<Weight<<endl;
}

TLorentzVector SkimmingSR::getBestPhoton(){
  TLorentzVector v1;
  vector<TLorentzVector> goodPho;
  for(int iPhoton=0;iPhoton<Photons->size();iPhoton++){
    if( ((*Photons_fullID)[iPhoton]) && ((*Photons_hasPixelSeed)[iPhoton]<0.001) ) goodPho.push_back( (*Photons)[iPhoton] );
  }

  if(goodPho.size()==0) return v1;
  sortTLorVec(&goodPho);
  return goodPho[0];
  
}
